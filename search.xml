<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>汉诺塔问题的递归和非递归</title>
    <url>/2020/07/02/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>相传在古印度圣庙中，有一种被称为汉诺塔(Hanoi)的游戏。该游戏是在一块铜板装置上，有三根杆(编号A、B、C)，在A杆自下而上、由大到小按顺序放置n个金盘（依次标号1到n）。游戏的目标：把A杆上的金盘全部移到C杆上，并仍保持原有顺序叠好。操作规则：每次只能移动一个盘子，并且在移动过程中三根杆上都始终保持大盘在下，小盘在上，操作过程中盘子可以置于A、B、C任一杆上。</p>
<h6 id="问题分析（递归算法）"><a href="#问题分析（递归算法）" class="headerlink" title="问题分析（递归算法）"></a>问题分析（递归算法）</h6><p>如果A杆上只有一个盘子，则直接将盘子从A杆移至C杆即可。</p>
<p><img src="https://img-blog.csdnimg.cn/20200209144746181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p>
<p>如果A上有2个盘子，则需要先把1号盘子挪到辅助杆B上，再把2号盘挪到目标杆C上，最后把B杆上的1号盘挪到C杆上即可完成。</p>
<p><img src="https://img-blog.csdnimg.cn/20200209151647246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>A杆上的盘子数目逐渐增加到n，我们无法直观的得到结果。于是想到将n个盘子看做两部分，一个部分为上层的(n-1)个盘子，另一个部分为最底下的一个盘子。</p>
<p>于是，三步就可以完成移动：<br>①借助C杆将（n-1）个盘子从A杆移动到B杆；</p>
<p><img src="https://img-blog.csdnimg.cn/20200311115036394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>hanoi(A,B,C,n-1);</p>
<p>②把n号盘子从A杆移到C杆；</p>
<p><img src="https://img-blog.csdnimg.cn/20200311115132364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>cout&lt;&lt;n&lt;&lt;”from”&lt;&lt;A&lt;&lt;”to”&lt;&lt;C&lt;&lt;endl;</p>
<p>③借助A杆把（n-1）个盘子从B杆移到C杆；</p>
<p><img src="https://img-blog.csdnimg.cn/2020031111523670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>hanoi(B,A,C,n-1);</p>
<h6 id="递归算法："><a href="#递归算法：" class="headerlink" title="递归算法："></a>递归算法：</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">( <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		hanoi(A, C, B, n - <span class="number">1</span>);	<span class="comment">//将(n-1)个盘子从A移至B</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt;n&lt;&lt;<span class="string">" from "</span>&lt;&lt; A &lt;&lt; <span class="string">" to "</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;	<span class="comment">//将最底下的一个盘子从A移到C</span></span><br><span class="line">		hanoi(B, A, C, n - <span class="number">1</span>);	<span class="comment">//把(n-1)个从B移至C</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">char</span> a=<span class="string">'A'</span>,b=<span class="string">'B'</span>,c=<span class="string">'C'</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	hanoi(a,b,c,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h6><p>当规模为n时时间函数为T(n)，在代码中，两次调用规模为（n-1）的汉诺塔函数，还有一次输出语句，运算时间为常数n，所以时间函数为T(n)=2*T(n-1)+1。</p>
<img src="https://img-blog.csdnimg.cn/20200311115706941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img" style="zoom:50%;" />

<img src="https://img-blog.csdnimg.cn/20200311115727733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img" style="zoom:50%;" />

<p>最后求得递归算法的时间复杂度为O(2^n)。</p>
<h6 id="问题分析（非递归算法）"><a href="#问题分析（非递归算法）" class="headerlink" title="问题分析（非递归算法）"></a>问题分析（非递归算法）</h6><img src="https://img-blog.csdnimg.cn/20200311115849231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img" style="zoom:100%;" />

<p>举个例子，当n=3时。因为是奇数，所以杆的摆放顺序为ACB。之后循环进行两步操作。如下图所示：</p>
<img src="https://img-blog.csdnimg.cn/20200311120022677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img" style="zoom:100%;" />

<p>图片右上角是用这种规律移动的步骤，可验证与用递归算法移动的步骤完全相同。</p>
<h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">4</span>] = &#123; <span class="string">'0'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; a[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> next)</span></span>&#123; <span class="comment">//用来移动的函数 </span></span><br><span class="line">		a[next].push(a[now].top());</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d from %c to %c\n"</span>, a[now].top(),s[now], s[next]);</span><br><span class="line">		a[now].pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>  n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		a[<span class="number">1</span>].push(n - i);<span class="comment">//把盘子从大到小入栈 </span></span><br><span class="line">	<span class="keyword">if</span> (n%<span class="number">2</span> == <span class="number">1</span>) &#123;<span class="comment">//如果n为奇数则杆的排列顺序为ACB </span></span><br><span class="line">		s[<span class="number">2</span>] = <span class="string">'C'</span>; </span><br><span class="line">		s[<span class="number">3</span>] = <span class="string">'B'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> next;<span class="comment">//用来记录第一步中的下一个杆； </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)<span class="comment">//将最小圆盘移动到下一个杆上</span></span><br><span class="line">			<span class="keyword">if</span>(!a[i].empty())&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i].top()==<span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span>(i==<span class="number">3</span>) next=<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">else</span> next=i+<span class="number">1</span>;</span><br><span class="line">					<span class="built_in">move</span>(i,next);<span class="comment">//移动 </span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span>(a[<span class="number">2</span>].<span class="built_in">size</span>()==n || a[<span class="number">3</span>].<span class="built_in">size</span>()==n) <span class="keyword">break</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> other1,other2;<span class="comment">//记录第二步中的另外两个杆 </span></span><br><span class="line">		<span class="keyword">switch</span>(next)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:&#123;other1=<span class="number">2</span>;other2=<span class="number">3</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:&#123;other1=<span class="number">3</span>;other2=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:&#123;other1=<span class="number">1</span>;other2=<span class="number">2</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[other1].empty())<span class="comment">//移动到空杆 </span></span><br><span class="line">			<span class="built_in">move</span>(other2,other1);	</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[other2].empty())</span><br><span class="line">			<span class="built_in">move</span>(other1,other2);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[other1].top()&lt;a[other2].top())<span class="comment">// 把较小的那个圆盘移动到较大的那个圆盘上</span></span><br><span class="line">				<span class="built_in">move</span>(other1,other2);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">move</span>(other2,other1);	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可证明非递归算法的时间复杂度也是O(2^n)，再次证明了汉诺塔问题的递归算法和非递归算法其实是一回事。</p>
<p><a href="https://www.bilibili.com/video/av95313700/" target="_blank" rel="noopener">https://www.bilibili.com/video/av95313700/</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵连乘问题-动态规划</title>
    <url>/2020/07/02/%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>将待求解问题分解成若干个不独立的子问题，求出子问题的解并记录在表中，当需要再次求解此子问题时，可以通过查表获得该子问题的解而不用再次求解，从而避免了大量的重复计算。最后结合这些子问题的解即可得到原问题的解。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>①分析问题的最优子结构性质：一个最优策略的子策略总是最优的</p>
<p>②建立递归关系</p>
<p>③自下而上计算最优值</p>
<p>④根据计算最优值时得到的信息，构造最优解</p>
<h2 id="矩阵连乘问题"><a href="#矩阵连乘问题" class="headerlink" title="矩阵连乘问题"></a>矩阵连乘问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>​        给定n个矩阵{A1,A2,…,An} 其中Ai与Ai+1是可乘的（i=1,2,…,n-1），确定计算矩阵连乘积的计算次序，使得依此次序计算矩阵连乘积需要的数乘次数最少。输入数据为矩阵的个数和每个矩阵的规模，输出结果为计算矩阵连乘积的计算次序和最少数乘次数</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>​        为方便起见，将连乘积AiAi+1…Aj简记为A[i:j]，其中Ai的维度记为pi-1×pi。</p>
<p>​        那么计算目的是求解A[1:n]的最优解，而一个最优策略的子策略也应是最优的，所以问题可分解为求A[i:j]的最优计算次序。</p>
<p>​        考察计算A[i:j]的最优计算次序：设这个计算次序在矩阵Ak和Ak+1之间将矩阵链断开，i≤k&lt;j，则其相应加括号的方式为：(Ai* Ai+1，…，Ak)(Ak+1*Ak+2，…，Aj)。</p>
<p>​         那么A[i:j]的计算量为A[i:k]的计算量加上A[k+1:j]的计算量，再加上A[i:k]和A[k+1:j]相乘的计算量。</p>
<h3 id="建立递归关系"><a href="#建立递归关系" class="headerlink" title="建立递归关系"></a>建立递归关系</h3><p><img src="https://img-blog.csdnimg.cn/20200626160719169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI0MDM3,size_16,color_FFFFFF,t_70" alt="img"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 0xfffffff</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="keyword">int</span> s[N][N],dp[N][N];  <span class="comment">//S存储切割位置，dp存储最优值 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatricChain</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;i++)<span class="comment">//赋初值 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">			dp[i][j]=MAX;</span><br><span class="line">			s[i][j]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">		dp[i][i]=<span class="number">0</span>;<span class="comment">//只有一个矩阵时不能相乘</span></span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> L=<span class="number">2</span>;L&lt;=n;L++)&#123;<span class="comment">//相乘矩阵的个数 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; </span><br><span class="line">			<span class="keyword">int</span> j=i+L<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span>(j&gt;n) <span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++)&#123;<span class="comment">//遍历切割位置</span></span><br><span class="line">				<span class="keyword">int</span> min_=dp[i][j];</span><br><span class="line">				<span class="keyword">int</span> temp=dp[i][k]+dp[k+<span class="number">1</span>][j]+p[i<span class="number">-1</span>]*p[k]*p[j];</span><br><span class="line">				<span class="keyword">if</span>(temp&lt;min_)&#123;</span><br><span class="line">					dp[i][j]=temp;</span><br><span class="line">					min_=temp;</span><br><span class="line">					s[i][j]=k;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="comment">//	dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+p[i-1]*p[k]*p[j]);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traceback</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==j) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> k=s[i][j];</span><br><span class="line">	Traceback(i,k);</span><br><span class="line">	Traceback(k+<span class="number">1</span>,j);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"A["</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;k&lt;&lt;<span class="string">"]*A["</span>&lt;&lt;k+<span class="number">1</span>&lt;&lt;<span class="string">":"</span>&lt;&lt;j&lt;&lt;<span class="string">"]"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	</span><br><span class="line">	MatricChain();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;setw(<span class="number">10</span>)&lt;&lt;dp[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;setw(<span class="number">5</span>)&lt;&lt;s[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"连乘的最少次数是"</span>&lt;&lt;dp[<span class="number">1</span>][n]&lt;&lt;<span class="string">"次。"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	Traceback(<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试案列：</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">2 7 5 4 2 3 8</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">30 35 15 5 10 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O（n^3）</p>
<p><a href="https://www.bilibili.com/video/bv1CK411n7y1" target="_blank" rel="noopener">讲解视频</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
